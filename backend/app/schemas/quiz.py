"""
Pydantic schemas for quiz-related API requests and responses.
"""

from datetime import datetime

from pydantic import BaseModel, Field


class QuestionOptionBase(BaseModel):
    """Base schema for question options."""

    option_text: str = Field(..., description="The text of the option")
    option_letter: str = Field(..., description="The letter (A, B, C, D) of the option")
    is_correct: bool = Field(..., description="Whether this option is correct")


class QuestionOptionCreate(QuestionOptionBase):
    """Schema for creating a question option."""


class QuestionOptionResponse(QuestionOptionBase):
    """Schema for question option in responses."""

    id: int

    class Config:
        from_attributes = True


class QuestionBase(BaseModel):
    """Base schema for questions."""

    question_text: str = Field(..., description="The text of the question")
    question_order: int = Field(
        ..., description="The order of the question in the quiz"
    )


class QuestionCreate(QuestionBase):
    """Schema for creating a question."""

    options: list[QuestionOptionCreate] = Field(
        ..., description="The multiple choice options"
    )


class QuestionResponse(QuestionBase):
    """Schema for question in responses."""

    id: int
    options: list[QuestionOptionResponse]

    class Config:
        from_attributes = True


class QuizBase(BaseModel):
    """Base schema for quizzes."""

    topic: str = Field(
        ..., min_length=1, max_length=100, description="The topic of the quiz"
    )


class QuizCreate(QuizBase):
    """Schema for creating a quiz."""


class QuizGenerated(QuizBase):
    """Schema for a generated quiz with questions."""

    questions: list[QuestionCreate] = Field(..., description="The generated questions")


class QuizResponse(QuizBase):
    """Schema for quiz in responses."""

    id: int
    created_at: datetime
    questions: list[QuestionResponse]

    class Config:
        from_attributes = True


class UserAnswerSubmission(BaseModel):
    """Schema for submitting answers to a quiz."""

    question_id: int = Field(..., description="The ID of the question")
    selected_option_id: int = Field(..., description="The ID of the selected option")


class QuizSubmission(BaseModel):
    """Schema for submitting a completed quiz."""

    quiz_id: int = Field(..., description="The ID of the quiz")
    answers: list[UserAnswerSubmission] = Field(..., description="The user's answers")


class QuizResult(BaseModel):
    """Schema for quiz results."""

    score: int = Field(..., description="Number of correct answers")
    total_questions: int = Field(..., description="Total number of questions")
    percentage: float = Field(..., description="Percentage score")
    correct_answers: list[dict] = Field(..., description="Details of correct answers")


class QuizAttemptResponse(BaseModel):
    """Schema for quiz attempt response."""

    id: int
    quiz_id: int
    attempted_at: datetime
    score: int
    total_questions: int

    class Config:
        from_attributes = True


# Gemini API specific schemas
class GeneratedQuizQuestion(BaseModel):
    """Schema for a question generated by Gemini API."""

    question: str = Field(..., description="The question text")
    options: dict = Field(
        ..., description="Dictionary with keys A, B, C, D and their text"
    )
    correct_answer: str = Field(
        ..., description="The letter of the correct answer (A, B, C, or D)"
    )
    explanation: str | None = Field(
        None, description="Explanation of the correct answer"
    )


class GeminiQuizResponse(BaseModel):
    """Schema for the structured response from Gemini API."""

    topic: str = Field(..., description="The quiz topic")
    questions: list[GeneratedQuizQuestion] = Field(
        ..., description="List of generated questions"
    )
    difficulty_level: str | None = Field(
        "medium", description="Difficulty level of the quiz"
    )


class FeedbackQuestion(BaseModel):
    """Schema for a question requiring feedback/explanation."""

    question_id: int
    question_text: str
    user_selected: str
    user_selected_text: str
    correct_option: str
    correct_text: str


class FeedbackRequest(BaseModel):
    """Request payload to get feedback for incorrect answers."""

    topic: str = Field(..., description="The quiz topic")
    items: list[FeedbackQuestion] = Field(
        ..., description="Incorrect answers to explain"
    )


class FeedbackItem(BaseModel):
    """Single feedback entry returned to the client."""

    question_id: int
    explanation: str


class FeedbackResponse(BaseModel):
    """Response containing explanations for incorrect answers."""

    items: list[FeedbackItem]
